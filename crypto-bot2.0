import os
import requests
import pandas as pd
from coinbase.rest import RESTClient
from google.cloud import secretmanager
from datetime import datetime, timedelta, timezone
import logging
import openai  # Ensure openai is imported clearly at top

logging.basicConfig(level=logging.INFO)

# Securely fetch credentials
def get_secret(secret_name):
    project_id = os.getenv("GCP_PROJECT_ID")
    client = secretmanager.SecretManagerServiceClient()
    path = f"projects/{project_id}/secrets/{secret_name}/versions/latest"
    response = client.access_secret_version(request={"name": path})
    return response.payload.data.decode("UTF-8")

# Setup credentials
COINBASE_API_KEY = get_secret("COINBASE_API_KEY")
COINBASE_SECRET_KEY = get_secret("COINBASE_SECRET_KEY")
TELEGRAM_BOT_KEY = get_secret("TELEGRAM_BOT_KEY")
TELEGRAM_CHAT_ID = get_secret("TELEGRAM_CHAT_ID")
OPENAI_API_KEY = get_secret("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

client = RESTClient(api_key=COINBASE_API_KEY, api_secret=COINBASE_SECRET_KEY)

WATCHED_COINS = [
    'BTC-USD', 'ETH-USD', 'SOL-USD', 'RNDR-USD', 'APT-USD', 'ARB-USD', 
    'OP-USD', 'DOGE-USD', 'SHIB-USD', 'PEPE-USD', 'AVAX-USD', 'ADA-USD'
]

def send_telegram_message(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_KEY}/sendMessage"
    requests.post(url, params={"chat_id": TELEGRAM_CHAT_ID, "text": message})

def fetch_candles(coin, granularity, period_hours):
    end = datetime.now(timezone.utc)
    start = end - timedelta(hours=period_hours)
    response = client.get_candles(
        product_id=coin, granularity=granularity,
        start=int(start.timestamp()), end=int(end.timestamp())
    )
    return pd.DataFrame([{
        'time': pd.to_datetime(int(c['start']), unit='s'),
        'open': float(c['open']),
        'close': float(c['close']),
        'volume': float(c['volume'])
    } for c in response.candles]).sort_values('time')

def check_daily_momentum():
    logging.info("Checking daily momentum...")
    for coin in WATCHED_COINS:
        df = fetch_candles(coin, 'ONE_DAY', 168)
        if len(df) < 2:
            continue
        yesterday = df.iloc[-2]
        avg_volume = df['volume'][:-1].mean()
        price_change = (yesterday['close'] - yesterday['open']) / yesterday['open']
        volume_change = yesterday['volume'] / avg_volume
        if price_change >= 0.10 and volume_change >= 1.5:
            msg = f"ðŸ“ˆ Daily Momentum: {coin}\nChange: {price_change:.2%}\nVol Spike: {volume_change:.2f}x"
            logging.info(msg)
            send_telegram_message(msg)

def check_hourly_mean_reversion():
    logging.info("Checking hourly mean reversion opportunities...")
    for coin in WATCHED_COINS:
        df = fetch_candles(coin, 'ONE_HOUR', 72)
        if df.empty or len(df) < 5:
            continue
        recent_close = df.iloc[-1]['close']
        mean_close = df['close'].mean()
        deviation = (recent_close - mean_close) / mean_close
        if abs(deviation) >= 0.05:
            msg = f"ðŸ”„ Mean Reversion Alert: {coin}\nDeviation: {deviation:.2%}"
            logging.info(msg)
            send_telegram_message(msg)

def calculate_rsi(series, period=14):
    delta = series.diff(1).dropna()
    gain = delta.where(delta > 0, 0.0)
    loss = -delta.where(delta < 0, 0.0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100.0 - (100.0 / (1.0 + rs))
    return rsi.iloc[-1]

def check_rsi():
    logging.info("Checking RSI signals...")
    for coin in WATCHED_COINS:
        df = fetch_candles(coin, 'ONE_HOUR', 336)
        if len(df) < 15:
            continue
        rsi = calculate_rsi(df['close'])
        if rsi <= 30:
            msg = f"ðŸ“‰ RSI Oversold Alert: {coin}\nRSI: {rsi:.2f} (Possible Buy)"
            logging.info(msg)
            send_telegram_message(msg)
        elif rsi >= 70:
            msg = f"ðŸ“ˆ RSI Overbought Alert: {coin}\nRSI: {rsi:.2f} (Possible Sell)"
            logging.info(msg)
            send_telegram_message(msg)

def generate_trade_idea(market_summary: str) -> str:
    prompt = (
        "You are a crypto trading expert. "
        "Analyze the recent market movements described below and "
        "suggest any trading ideas (buy/sell/hold) with concise reasoning:\n\n"
        f"{market_summary}\n\n"
        "Provide your insights briefly."
    )
    client = openai.OpenAI(api_key=OPENAI_API_KEY)
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=250,
        temperature=0.7,
    )
    return response.choices[0].message.content.strip()


def summarize_market():
    summaries = []
    for coin in WATCHED_COINS:
        df = fetch_candles(coin, 'ONE_HOUR', 48)
        if len(df) < 2:
            continue
        latest = df.iloc[-1]
        prev = df.iloc[-2]
        price_change = ((latest['close'] - prev['close']) / prev['close']) * 100
        summaries.append(f"{coin}: {price_change:.2f}% change in the last hour.")
    return "\n".join(summaries)

def check_market_with_llm():
    logging.info("Generating market insights via GPT-4...")
    market_summary = summarize_market()
    trade_idea = generate_trade_idea(market_summary)
    logging.info(f"LLM Trade Idea: {trade_idea}")
    send_telegram_message(f"ðŸ¤– GPT-4 Trade Idea:\n{trade_idea}")

# Main execution loop (explicitly placed at the end)
def main():
    check_daily_momentum()
    check_hourly_mean_reversion()
    check_rsi()
    check_market_with_llm()

if __name__ == '__main__':
    main()
